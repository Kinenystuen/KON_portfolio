import { useEffect, useRef, useState } from "react";

const ScrollDownArrow = () => {
  const [scrollY, setScrollY] = useState(0);
  const [isBouncing, setIsBouncing] = useState(false);
  const bounceTimeout = useRef<NodeJS.Timeout | null>(null);

  // Handle scroll
  useEffect(() => {
    const handleScroll = () => {
      setScrollY(window.scrollY);

      // Stop bouncing if the user scrolls
      if (bounceTimeout.current) {
        clearTimeout(bounceTimeout.current);
      }
      setIsBouncing(false);
      bounceTimeout.current = setTimeout(() => {
        if (window.scrollY === 0) {
          setIsBouncing(true); // Start bouncing after 5 seconds
        }
      }, 5000);
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
      if (bounceTimeout.current) clearTimeout(bounceTimeout.current);
    };
  }, []);

  // Scroll to the next section
  const scrollToNext = () => {
    const nextSection = document.querySelector(".next-section");
    if (nextSection) {
      nextSection.scrollIntoView({ behavior: "smooth" });
    }
  };

  return (
    <div
      className={`fixed left-1/2 bottom-6 transition-all duration-300 ease-out ${
        isBouncing ? "animate-bounce" : ""
      }`}
      style={{
        transform: `translateX(-50%) translateY(-${scrollY}px)`,
        opacity: 1 - Math.min(scrollY / 30, 1)
      }}
      onClick={scrollToNext}
      role="button"
      tabIndex={0}
      aria-label="Scroll to the next section"
    >
      <svg
        width="47"
        height="19"
        viewBox="0 0 47 19"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M44 3L23.5997 16M3 3L23.4003 16"
          stroke="var(--color4)"
          strokeWidth="5"
          strokeLinecap="round"
        />
      </svg>
    </div>
  );
};

export default ScrollDownArrow;
